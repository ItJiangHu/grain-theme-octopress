apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
version = '1.0'
defaultTasks 'preview'

def compatibilityVersion = 1.5
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion
mainClassName = 'com.example.grain.Launcher'

clean.doLast { ant.delete(dir: ".cache"); ant.delete(dir: "target") }

buildscript {
    project.ext {
        grainHome = System.getenv('GRAIN_HOME')

        if (!grainHome) {
            throw new RuntimeException('Please set GRAIN_HOME environment variable')
        }

        grainProps = new Properties()
        grainProps.load(new FileInputStream("$grainHome/build.properties"))
        grainVersion = grainProps.getProperty('grain.version')?.toString()

        if (!project.grainVersion) {
            throw new RuntimeException('GRAIN_HOME is set to an invalid directory')
        }
    }
}

repositories {
    mavenCentral()
    ivy {
        name 'local-grain-repo'
        artifactPattern "file:///$project.grainHome/ivy/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
    }
}

dependencies {
    compile "com.sysgears.grain:grain:$project.grainVersion"

    compile 'org.codehaus.groovy:groovy:2.1.2'
}

project.ext {
    grainJar = project.configurations.compile.find { it.name.startsWith("grain-") }
}

sourceSets {
    main {
        groovy {
            srcDirs = ['theme/src']
        }
    }
}

task(preview) << {
    println "Launching ${project.grainJar} preview"
    javaexec { main = "-jar"; args "${project.grainJar}", "preview" }
}

task(generate) << {
    println "Launching ${project.grainJar} generate"
    javaexec { main = "-jar"; args "${project.grainJar}", "generate" }
}

task(deploy) << {
    println "Launching ${project.grainJar} deploy"
    javaexec { main = "-jar"; args "${project.grainJar}", "deploy" }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

idea {
    module {
        excludeDirs = [".cache", ".idea", ".gradle", ".nb-gradle", ".settings", "bin", "out", "target"].collect { file(it) }
    }
}
